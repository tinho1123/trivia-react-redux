{"ast":null,"code":"var _jsxFileName = \"/home/wellington/\\xC1rea de Trabalho/projects/sd-016-b-project-trivia-react-redux/src/components/pages/PlayGame.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from './Header';\n\nclass PlayGame extends Component {\n  constructor() {\n    super();\n\n    this.getQuestions = async () => {\n      const {\n        token\n      } = this.props;\n      const curr = `https://opentdb.com/api.php?amount=5&token=${token}`;\n      const response = await fetch(curr);\n      const questionsObjt = await response.json();\n      const qAndA = questionsObjt.results[0];\n      this.setState({\n        question: qAndA,\n        played: true,\n        arrayAnswers: [...qAndA.incorrect_answers, qAndA.correct_answer]\n      });\n    };\n\n    this.timer = () => {\n      console.log('entrou');\n      const {\n        seconds\n      } = this.state;\n      const magicNumber = 1000; // const buttons = document.querySelectorAll('.buttonAnswer');\n\n      setInterval(() => {\n        this.setState({\n          seconds: seconds - 1\n        });\n      }, magicNumber); // buttons.disabled = false;\n    };\n\n    this.state = {\n      played: false,\n      question: '',\n      arrayAnswers: [],\n      seconds: 30\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n    this.timer();\n  }\n\n  // terminar esta funcao...\n  colorize() {\n    const buttons = document.querySelectorAll('.buttonAnswer');\n    buttons.forEach(button => {\n      const testId = button.getAttribute('data-testid');\n\n      if (testId === 'correct-answer') {\n        button.style.border = '3px solid rgb(6, 240, 15)';\n      } else {\n        button.style.border = '3px solid rgb(255, 0, 0)';\n      }\n    });\n  }\n\n  render() {\n    const {\n      question,\n      played,\n      arrayAnswers,\n      seconds\n    } = this.state;\n    const magicNumber = 0.4;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }), !played ? null : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    }, question.category), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }\n    }, question.question), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"answer-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 15\n      }\n    }, arrayAnswers.sort(() => Math.random() - magicNumber).map((el, i) => /*#__PURE__*/React.createElement(\"button\", {\n      className: \"buttonAnswer\",\n      type: \"button\",\n      key: i,\n      \"data-testid\": el === question.correct_answer ? 'correct-answer' : `wrong-answer-${i}`,\n      onClick: () => this.colorize(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }, el))), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"timer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 15\n      }\n    }, \"Timer:\", console.log(seconds))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  token: state.token,\n  questions: state.player.questions\n});\n\nPlayGame.propTypes = {\n  token: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps)(PlayGame);","map":{"version":3,"sources":["/home/wellington/Área de Trabalho/projects/sd-016-b-project-trivia-react-redux/src/components/pages/PlayGame.jsx"],"names":["React","Component","connect","PropTypes","Header","PlayGame","constructor","getQuestions","token","props","curr","response","fetch","questionsObjt","json","qAndA","results","setState","question","played","arrayAnswers","incorrect_answers","correct_answer","timer","console","log","seconds","state","magicNumber","setInterval","componentDidMount","colorize","buttons","document","querySelectorAll","forEach","button","testId","getAttribute","style","border","render","category","sort","Math","random","map","el","i","mapStateToProps","questions","player","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from './Header';\n\nclass PlayGame extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      played: false,\n      question: '',\n      arrayAnswers: [],\n      seconds: 30,\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n    this.timer();\n  }\n\n  getQuestions = async () => {\n    const { token } = this.props;\n    const curr = `https://opentdb.com/api.php?amount=5&token=${token}`;\n    const response = await fetch(curr);\n    const questionsObjt = await response.json();\n    const qAndA = questionsObjt.results[0];\n    this.setState({\n      question: qAndA,\n      played: true,\n      arrayAnswers: [...qAndA.incorrect_answers,\n        qAndA.correct_answer],\n    });\n  };\n\n  timer = () => {\n    console.log('entrou');\n    const { seconds } = this.state;\n    const magicNumber = 1000;\n    // const buttons = document.querySelectorAll('.buttonAnswer');\n    setInterval(() => {\n      this.setState(({\n        seconds: seconds - 1,\n      }));\n    }, magicNumber);\n    // buttons.disabled = false;\n  }\n  // terminar esta funcao...\n\n  colorize() {\n    const buttons = document.querySelectorAll('.buttonAnswer');\n    buttons.forEach((button) => {\n      const testId = button.getAttribute('data-testid');\n      if (testId === 'correct-answer') {\n        button.style.border = '3px solid rgb(6, 240, 15)';\n      } else {\n        button.style.border = '3px solid rgb(255, 0, 0)';\n      }\n    });\n  }\n\n  render() {\n    const { question, played, arrayAnswers, seconds } = this.state;\n\n    const magicNumber = 0.4;\n    return (\n      <div>\n        <Header />\n        {!played ? null\n          : (\n            <div>\n              <p\n                data-testid=\"question-category\"\n              >\n                {question.category}\n              </p>\n              <p\n                data-testid=\"question-text\"\n              >\n                {question.question}\n              </p>\n              <p\n                data-testid=\"answer-options\"\n              >\n                {arrayAnswers\n                  .sort(() => Math\n                    .random() - magicNumber)\n                  .map((el, i) => (\n                    <button\n                      className=\"buttonAnswer\"\n                      type=\"button\"\n                      key={ i }\n                      data-testid={ el === question\n                        .correct_answer ? 'correct-answer' : `wrong-answer-${i}` }\n                      onClick={ () => this.colorize() }\n                    >\n                      {el}\n                    </button>\n                  ))}\n                {/* chamar esta funcao junto com o map das alternativas {this.timer()}\n */}\n              </p>\n              <p\n                id=\"timer\"\n              >\n                Timer:\n                {console.log(seconds)}\n              </p>\n            </div>)}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.token,\n  questions: state.player.questions,\n});\n\nPlayGame.propTypes = {\n  token: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps)(PlayGame);\n"]},"metadata":{},"sourceType":"module"}