{"ast":null,"code":"var _jsxFileName = \"/home/wellington/\\xC1rea de Trabalho/projects/sd-016-b-project-trivia-react-redux/src/components/pages/PlayGame/PlayGame.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../Header/Header';\nimport { setScore, tokenAction } from '../../../actions';\nimport './playGame.css';\nconst magicNumber = 0.4;\nconst ifNumber = 3;\nconst CORRECT_ANSWER = 'correct-answer';\n\nclass PlayGame extends Component {\n  constructor() {\n    super();\n\n    this.getQuestions = async () => {\n      const {\n        current\n      } = this.state;\n      const {\n        token\n      } = this.props;\n      console.log(token);\n      const curr = `https://opentdb.com/api.php?amount=5&token=${token}`;\n      const response = await fetch(curr);\n      const questionsObjt = await response.json();\n      const qAndA = questionsObjt.results[current];\n      console.log(questionsObjt);\n      this.setState({\n        question: questionsObjt.results,\n        played: true,\n        arrayAnswers: [...qAndA.incorrect_answers, qAndA.correct_answer].sort(() => Math.random() - magicNumber)\n      });\n    };\n\n    this.newQuest = () => {\n      const {\n        question,\n        current\n      } = this.state;\n      const teste = question[current];\n      this.setState({\n        arrayAnswers: [...teste.incorrect_answers, teste.correct_answer].sort(() => Math.random() - magicNumber),\n        disabledbutton: false,\n        seconds: 30,\n        clicked: false\n      });\n      this.timer();\n    };\n\n    this.diffNumber = () => {\n      const {\n        question\n      } = this.state;\n      const diff = question.difficulty;\n      if (diff === 'medium') return 2;\n      if (diff === 'hard') return ifNumber;\n      return 1;\n    };\n\n    this.descolorize = () => {\n      const buttons = document.querySelectorAll('.buttonAnswer');\n      buttons.forEach(button => {\n        const testId = button.getAttribute('data-testid');\n\n        if (testId === CORRECT_ANSWER) {\n          button.style.border = '';\n        } else {\n          button.style.border = '';\n        }\n      });\n    };\n\n    this.somaPontos = () => {\n      const {\n        setScores\n      } = this.props;\n      const {\n        seconds\n      } = this.state;\n      const points = +'10' + this.diffNumber() * seconds;\n      setScores({\n        score: points,\n        assertions: 1\n      });\n    };\n\n    this.stopWatch = timerzin => clearInterval(timerzin);\n\n    this.timer = () => {\n      const magicNumbertimer = 1000;\n      const timerzin = setInterval(() => {\n        const {\n          seconds,\n          clicked\n        } = this.state;\n\n        if (seconds === 0 || clicked) {\n          this.setState({\n            disabledbutton: true\n          });\n          return this.stopWatch(timerzin);\n        }\n\n        this.setState({\n          seconds: seconds - 1\n        });\n      }, magicNumbertimer);\n    };\n\n    this.nextQuestion = () => {\n      const {\n        current,\n        question\n      } = this.state;\n      const {\n        history,\n        player\n      } = this.props;\n\n      if (current === question.length - 1) {\n        history.push('./feedback');\n      } else {\n        this.setState({\n          current: current + 1\n        });\n      }\n\n      localStorage.setItem(localStorage.length, JSON.stringify({\n        score: player.score,\n        email: player.email,\n        name: player.name\n      }));\n    };\n\n    this.state = {\n      played: false,\n      question: '',\n      arrayAnswers: [],\n      seconds: 30,\n      disabledbutton: false,\n      clicked: false,\n      current: 0\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n    this.timer();\n  }\n\n  componentDidUpdate(prevprops, prevstate) {\n    const {\n      current\n    } = this.state;\n\n    if (prevstate.current !== current) {\n      this.newQuest();\n      this.descolorize();\n    }\n  }\n\n  async getQuestionsAgain() {\n    const {\n      saveToken\n    } = this.props;\n    const curr = 'https://opentdb.com/api_token.php?command=request';\n    const response = await fetch(curr);\n    const json = await response.json();\n    localStorage.setItem(localStorage.length + 1, JSON.stringify(json.token));\n    this.setState({\n      token: json.token\n    }, () => {\n      saveToken(this.state);\n    });\n  }\n\n  colorize(event) {\n    this.setState({\n      clicked: true\n    });\n    const buttons = document.querySelectorAll('.buttonAnswer');\n\n    if (event.target.name === CORRECT_ANSWER) {\n      this.somaPontos();\n    }\n\n    buttons.forEach(button => {\n      const testId = button.getAttribute('data-testid');\n\n      if (testId === CORRECT_ANSWER) {\n        button.style.border = '3px solid rgb(6, 240, 15)';\n      } else {\n        button.style.border = '3px solid rgb(255, 0, 0)';\n      }\n    });\n    this.stopWatch();\n  }\n\n  render() {\n    const {\n      question,\n      played,\n      arrayAnswers,\n      seconds,\n      disabledbutton,\n      current\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }\n    }), !played ? null : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"playGameContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 15\n      }\n    }, question[current].category), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 15\n      }\n    }, question[current].question), /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"answer-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 15\n      }\n    }, arrayAnswers.map((el, i) => /*#__PURE__*/React.createElement(\"button\", {\n      name: el === question[current].correct_answer ? CORRECT_ANSWER : `wrong-answer-${i}`,\n      disabled: disabledbutton,\n      className: \"buttonAnswer\",\n      type: \"button\",\n      key: i,\n      onClick: e => this.colorize(e),\n      \"data-testid\": el === question[current].correct_answer ? CORRECT_ANSWER : `wrong-answer-${i}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }\n    }, el))), /*#__PURE__*/React.createElement(\"button\", {\n      hidden: !disabledbutton,\n      onClick: this.nextQuestion,\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 15\n      }\n    }, \"Next\"), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"timer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 15\n      }\n    }, \"Timer:\", seconds)));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  token: state.token,\n  questions: state.player.questions,\n  player: state.player\n});\n\nconst mapDispatchToProps = dispacth => ({\n  setScores: payload => dispacth(setScore(payload)),\n  saveToken: payload => dispacth(tokenAction(payload))\n});\n\nPlayGame.propTypes = {\n  history: PropTypes.func.isRequired,\n  player: PropTypes.func.isRequired,\n  saveToken: PropTypes.func.isRequired,\n  setScores: PropTypes.func.isRequired,\n  token: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayGame);","map":{"version":3,"sources":["/home/wellington/√Årea de Trabalho/projects/sd-016-b-project-trivia-react-redux/src/components/pages/PlayGame/PlayGame.jsx"],"names":["React","Component","connect","PropTypes","Header","setScore","tokenAction","magicNumber","ifNumber","CORRECT_ANSWER","PlayGame","constructor","getQuestions","current","state","token","props","console","log","curr","response","fetch","questionsObjt","json","qAndA","results","setState","question","played","arrayAnswers","incorrect_answers","correct_answer","sort","Math","random","newQuest","teste","disabledbutton","seconds","clicked","timer","diffNumber","diff","difficulty","descolorize","buttons","document","querySelectorAll","forEach","button","testId","getAttribute","style","border","somaPontos","setScores","points","score","assertions","stopWatch","timerzin","clearInterval","magicNumbertimer","setInterval","nextQuestion","history","player","length","push","localStorage","setItem","JSON","stringify","email","name","componentDidMount","componentDidUpdate","prevprops","prevstate","getQuestionsAgain","saveToken","colorize","event","target","render","category","map","el","i","e","mapStateToProps","questions","mapDispatchToProps","dispacth","payload","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../Header/Header';\nimport { setScore, tokenAction } from '../../../actions';\nimport './playGame.css';\n\nconst magicNumber = 0.4;\nconst ifNumber = 3;\nconst CORRECT_ANSWER = 'correct-answer';\n\nclass PlayGame extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      played: false,\n      question: '',\n      arrayAnswers: [],\n      seconds: 30,\n      disabledbutton: false,\n      clicked: false,\n      current: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n    this.timer();\n  }\n\n  componentDidUpdate(prevprops, prevstate) {\n    const { current } = this.state;\n    if (prevstate.current !== current) {\n      this.newQuest();\n      this.descolorize();\n    }\n  }\n\n  async getQuestionsAgain() {\n    const { saveToken } = this.props;\n    const curr = 'https://opentdb.com/api_token.php?command=request';\n    const response = await fetch(curr);\n    const json = await response.json();\n    localStorage.setItem(localStorage.length + 1, JSON.stringify(json.token));\n    this.setState({\n      token: json.token,\n    }, () => {\n      saveToken(this.state);\n    });\n  }\n\n  getQuestions = async () => {\n    const { current } = this.state;\n    const { token } = this.props;\n    console.log(token);\n    const curr = `https://opentdb.com/api.php?amount=5&token=${token}`;\n    const response = await fetch(curr);\n    const questionsObjt = await response.json();\n    const qAndA = questionsObjt.results[current];\n    console.log(questionsObjt);\n    this.setState({\n      question: questionsObjt.results,\n      played: true,\n      arrayAnswers: [...qAndA.incorrect_answers,\n        qAndA.correct_answer].sort(() => Math.random() - magicNumber),\n    });\n  };\n\n  newQuest = () => {\n    const { question, current } = this.state;\n    const teste = question[current];\n    this.setState({\n      arrayAnswers: [...teste.incorrect_answers,\n        teste.correct_answer].sort(() => Math.random() - magicNumber),\n      disabledbutton: false,\n      seconds: 30,\n      clicked: false,\n    });\n    this.timer();\n  }\n\n  diffNumber = () => {\n    const { question } = this.state;\n    const diff = question.difficulty;\n    if (diff === 'medium') return 2;\n    if (diff === 'hard') return ifNumber;\n    return 1;\n  }\n\n  descolorize = () => {\n    const buttons = document.querySelectorAll('.buttonAnswer');\n    buttons.forEach((button) => {\n      const testId = button.getAttribute('data-testid');\n      if (testId === CORRECT_ANSWER) {\n        button.style.border = '';\n      } else {\n        button.style.border = '';\n      }\n    });\n  }\n\n   somaPontos = () => {\n     const { setScores } = this.props;\n     const { seconds } = this.state;\n     const points = +'10' + (this.diffNumber() * seconds);\n     setScores({ score: points, assertions: 1 });\n   };\n\n   stopWatch = (timerzin) => clearInterval(timerzin);\n\n  timer = () => {\n    const magicNumbertimer = 1000;\n    const timerzin = setInterval(() => {\n      const { seconds, clicked } = this.state;\n      if (seconds === 0 || clicked) {\n        this.setState({\n          disabledbutton: true,\n        });\n        return this.stopWatch(timerzin);\n      }\n      this.setState({ seconds: seconds - 1 });\n    }, magicNumbertimer);\n  }\n\n  nextQuestion = () => {\n    const { current, question } = this.state;\n    const { history, player } = this.props;\n    if (current === question.length - 1) {\n      history.push('./feedback');\n    } else {\n      this.setState({\n        current: current + 1,\n      });\n    }\n    localStorage.setItem(localStorage.length, JSON.stringify({\n      score: player.score,\n      email: player.email,\n      name: player.name,\n    }));\n  }\n\n  colorize(event) {\n    this.setState({\n      clicked: true,\n    });\n    const buttons = document.querySelectorAll('.buttonAnswer');\n    if (event.target.name === CORRECT_ANSWER) {\n      this.somaPontos();\n    }\n    buttons.forEach((button) => {\n      const testId = button.getAttribute('data-testid');\n      if (testId === CORRECT_ANSWER) {\n        button.style.border = '3px solid rgb(6, 240, 15)';\n      } else {\n        button.style.border = '3px solid rgb(255, 0, 0)';\n      }\n    });\n    this.stopWatch();\n  }\n\n  render() {\n    const { question,\n      played,\n      arrayAnswers,\n      seconds,\n      disabledbutton,\n      current } = this.state;\n\n    return (\n      <div>\n        <Header />\n        {!played ? null\n          : (\n            <div className=\"playGameContainer\">\n              <p\n                data-testid=\"question-category\"\n              >\n                {question[current].category}\n              </p>\n              <p\n                data-testid=\"question-text\"\n              >\n                {question[current].question}\n              </p>\n              <div\n                data-testid=\"answer-options\"\n              >\n                {arrayAnswers\n                  .map((el, i) => (\n                    <button\n                      name={ el === question[current]\n                        .correct_answer ? CORRECT_ANSWER : `wrong-answer-${i}` }\n                      disabled={ disabledbutton }\n                      className=\"buttonAnswer\"\n                      type=\"button\"\n                      key={ i }\n                      onClick={ (e) => this.colorize(e) }\n                      data-testid={ el === question[current]\n                        .correct_answer ? CORRECT_ANSWER : `wrong-answer-${i}` }\n                    >\n                      {el}\n\n                    </button>\n                  ))}\n              </div>\n              <button\n                hidden={ !disabledbutton }\n                onClick={ this.nextQuestion }\n                type=\"button\"\n                data-testid=\"btn-next\"\n              >\n                Next\n              </button>\n              <p\n                id=\"timer\"\n              >\n                Timer:\n                {seconds}\n              </p>\n\n            </div>)}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.token,\n  questions: state.player.questions,\n  player: state.player,\n});\n\nconst mapDispatchToProps = (dispacth) => ({\n  setScores: (payload) => dispacth(setScore(payload)),\n  saveToken: (payload) => dispacth(tokenAction(payload)),\n});\n\nPlayGame.propTypes = {\n  history: PropTypes.func.isRequired,\n  player: PropTypes.func.isRequired,\n  saveToken: PropTypes.func.isRequired,\n  setScores: PropTypes.func.isRequired,\n  token: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayGame);\n"]},"metadata":{},"sourceType":"module"}