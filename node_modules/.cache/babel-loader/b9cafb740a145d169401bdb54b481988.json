{"ast":null,"code":"var _jsxFileName = \"/home/wellington/\\xC1rea de Trabalho/projects/sd-016-b-project-trivia-react-redux/src/components/pages/PlayGame.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from './Header';\nimport { setScore } from '../../actions';\nconst magicNumber = 0.4;\nconst ifNumber = 3;\nconst CORRECT_ANSWER = 'correct-answer';\n\nclass PlayGame extends Component {\n  constructor() {\n    super();\n\n    this.newQuest = () => {\n      const {\n        question,\n        current\n      } = this.state;\n      const teste = question[current];\n      this.setState({\n        arrayAnswers: [...teste.incorrect_answers, teste.correct_answer].sort(() => Math.random() - magicNumber),\n        disabledbutton: false,\n        seconds: 30,\n        clicked: false\n      });\n      this.timer();\n    };\n\n    this.getQuestions = async () => {\n      const {\n        current\n      } = this.state;\n      const {\n        token\n      } = this.props;\n      const curr = `https://opentdb.com/api.php?amount=5&token=${token}`;\n      const response = await fetch(curr);\n      const questionsObjt = await response.json();\n      const qAndA = questionsObjt.results[current];\n      this.setState({\n        question: questionsObjt.results,\n        played: true,\n        arrayAnswers: [...qAndA.incorrect_answers, qAndA.correct_answer].sort(() => Math.random() - magicNumber)\n      });\n    };\n\n    this.diffNumber = () => {\n      const {\n        question\n      } = this.state;\n      const diff = question.difficulty;\n      if (diff === 'medium') return 2;\n      if (diff === 'hard') return ifNumber;\n      return 1;\n    };\n\n    this.descolorize = () => {\n      const buttons = document.querySelectorAll('.buttonAnswer');\n      buttons.forEach(button => {\n        const testId = button.getAttribute('data-testid');\n\n        if (testId === CORRECT_ANSWER) {\n          button.style.border = '';\n        } else {\n          button.style.border = '';\n        }\n      });\n    };\n\n    this.somaPontos = () => {\n      const {\n        setScores\n      } = this.props;\n      const {\n        seconds\n      } = this.state;\n      const points = +'10' + this.diffNumber() * seconds;\n      setScores({\n        score: points,\n        assertions: 1\n      });\n    };\n\n    this.stopWatch = timerzin => clearInterval(timerzin);\n\n    this.timer = () => {\n      const magicNumbertimer = 1000;\n      const timerzin = setInterval(() => {\n        const {\n          seconds,\n          clicked\n        } = this.state;\n\n        if (seconds === 0 || clicked) {\n          this.setState({\n            disabledbutton: true\n          });\n          return this.stopWatch(timerzin);\n        }\n\n        this.setState({\n          seconds: seconds - 1\n        });\n      }, magicNumbertimer);\n    };\n\n    this.nextQuestion = () => {\n      const {\n        current,\n        question\n      } = this.state;\n      const {\n        history\n      } = this.props;\n\n      if (current === question.length - 1) {\n        history.push('./feedback');\n      } else {\n        this.setState({\n          current: current + 1\n        });\n      }\n    };\n\n    this.state = {\n      played: false,\n      question: '',\n      arrayAnswers: [],\n      seconds: 30,\n      disabledbutton: false,\n      clicked: false,\n      current: 0\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n    this.timer();\n  }\n\n  componentDidUpdate(prevprops, prevstate) {\n    const {\n      current\n    } = this.state;\n\n    if (prevstate.current !== current) {\n      this.newQuest();\n      this.descolorize();\n    }\n  }\n\n  colorize(event) {\n    this.setState({\n      clicked: true\n    });\n    const buttons = document.querySelectorAll('.buttonAnswer');\n\n    if (event.target.name === CORRECT_ANSWER) {\n      this.somaPontos();\n    }\n\n    buttons.forEach(button => {\n      const testId = button.getAttribute('data-testid');\n\n      if (testId === CORRECT_ANSWER) {\n        button.style.border = '3px solid rgb(6, 240, 15)';\n      } else {\n        button.style.border = '3px solid rgb(255, 0, 0)';\n      }\n    });\n    this.stopWatch();\n  }\n\n  render() {\n    const {\n      question,\n      played,\n      arrayAnswers,\n      seconds,\n      disabledbutton,\n      current\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }), !played ? null : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 15\n      }\n    }, question[current].category), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 15\n      }\n    }, question[current].question), /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"answer-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 15\n      }\n    }, arrayAnswers.map((el, i) => /*#__PURE__*/React.createElement(\"button\", {\n      name: el === question[current].correct_answer ? CORRECT_ANSWER : `wrong-answer-${i}`,\n      disabled: disabledbutton,\n      className: \"buttonAnswer\",\n      type: \"button\",\n      key: i,\n      onClick: e => this.colorize(e),\n      \"data-testid\": el === question[current].correct_answer ? CORRECT_ANSWER : `wrong-answer-${i}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }\n    }, el))), /*#__PURE__*/React.createElement(\"button\", {\n      hidden: !disabledbutton,\n      onClick: this.nextQuestion,\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 15\n      }\n    }, \"Next\"), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"timer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 15\n      }\n    }, \"Timer:\", seconds)));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  token: state.token,\n  questions: state.player.questions\n});\n\nconst mapDispatchToProps = dispacth => ({\n  setScores: payload => dispacth(setScore(payload))\n});\n\nPlayGame.propTypes = {\n  token: PropTypes.func.isRequired,\n  setScores: PropTypes.func.isRequired,\n  history: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayGame);","map":{"version":3,"sources":["/home/wellington/√Årea de Trabalho/projects/sd-016-b-project-trivia-react-redux/src/components/pages/PlayGame.jsx"],"names":["React","Component","connect","PropTypes","Header","setScore","magicNumber","ifNumber","CORRECT_ANSWER","PlayGame","constructor","newQuest","question","current","state","teste","setState","arrayAnswers","incorrect_answers","correct_answer","sort","Math","random","disabledbutton","seconds","clicked","timer","getQuestions","token","props","curr","response","fetch","questionsObjt","json","qAndA","results","played","diffNumber","diff","difficulty","descolorize","buttons","document","querySelectorAll","forEach","button","testId","getAttribute","style","border","somaPontos","setScores","points","score","assertions","stopWatch","timerzin","clearInterval","magicNumbertimer","setInterval","nextQuestion","history","length","push","componentDidMount","componentDidUpdate","prevprops","prevstate","colorize","event","target","name","render","category","map","el","i","e","mapStateToProps","questions","player","mapDispatchToProps","dispacth","payload","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from './Header';\nimport { setScore } from '../../actions';\n\nconst magicNumber = 0.4;\nconst ifNumber = 3;\nconst CORRECT_ANSWER = 'correct-answer';\n\nclass PlayGame extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      played: false,\n      question: '',\n      arrayAnswers: [],\n      seconds: 30,\n      disabledbutton: false,\n      clicked: false,\n      current: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n    this.timer();\n  }\n\n  componentDidUpdate(prevprops, prevstate) {\n    const { current } = this.state;\n    if (prevstate.current !== current) {\n      this.newQuest();\n      this.descolorize();\n    }\n  }\n\n   newQuest = () => {\n     const { question, current } = this.state;\n     const teste = question[current];\n     this.setState({\n       arrayAnswers: [...teste.incorrect_answers,\n         teste.correct_answer].sort(() => Math.random() - magicNumber),\n       disabledbutton: false,\n       seconds: 30,\n       clicked: false,\n     });\n     this.timer();\n   }\n\n  getQuestions = async () => {\n    const { current } = this.state;\n    const { token } = this.props;\n    const curr = `https://opentdb.com/api.php?amount=5&token=${token}`;\n    const response = await fetch(curr);\n    const questionsObjt = await response.json();\n    const qAndA = questionsObjt.results[current];\n    this.setState({\n      question: questionsObjt.results,\n      played: true,\n      arrayAnswers: [...qAndA.incorrect_answers,\n        qAndA.correct_answer].sort(() => Math.random() - magicNumber),\n    });\n  };\n\n  diffNumber = () => {\n    const { question } = this.state;\n    const diff = question.difficulty;\n    if (diff === 'medium') return 2;\n    if (diff === 'hard') return ifNumber;\n    return 1;\n  }\n\n  descolorize = () => {\n    const buttons = document.querySelectorAll('.buttonAnswer');\n    buttons.forEach((button) => {\n      const testId = button.getAttribute('data-testid');\n      if (testId === CORRECT_ANSWER) {\n        button.style.border = '';\n      } else {\n        button.style.border = '';\n      }\n    });\n  }\n\n   somaPontos = () => {\n     const { setScores } = this.props;\n     const { seconds } = this.state;\n     const points = +'10' + (this.diffNumber() * seconds);\n     setScores({ score: points, assertions: 1 });\n   }\n\n   stopWatch = (timerzin) => clearInterval(timerzin);\n\n  timer = () => {\n    const magicNumbertimer = 1000;\n    const timerzin = setInterval(() => {\n      const { seconds, clicked } = this.state;\n      if (seconds === 0 || clicked) {\n        this.setState({\n          disabledbutton: true,\n        });\n        return this.stopWatch(timerzin);\n      }\n      this.setState({ seconds: seconds - 1 });\n    }, magicNumbertimer);\n  }\n\n  nextQuestion = () => {\n    const { current, question } = this.state;\n    const { history } = this.props;\n    if (current === question.length - 1) {\n      history.push('./feedback');\n    } else {\n      this.setState({\n        current: current + 1,\n      });\n    }\n  }\n\n  colorize(event) {\n    this.setState({\n      clicked: true,\n    });\n    const buttons = document.querySelectorAll('.buttonAnswer');\n    if (event.target.name === CORRECT_ANSWER) {\n      this.somaPontos();\n    }\n    buttons.forEach((button) => {\n      const testId = button.getAttribute('data-testid');\n      if (testId === CORRECT_ANSWER) {\n        button.style.border = '3px solid rgb(6, 240, 15)';\n      } else {\n        button.style.border = '3px solid rgb(255, 0, 0)';\n      }\n    });\n    this.stopWatch();\n  }\n\n  render() {\n    const { question,\n      played,\n      arrayAnswers,\n      seconds,\n      disabledbutton,\n      current } = this.state;\n\n    return (\n      <div>\n        <Header />\n        {!played ? null\n          : (\n            <div>\n              <p\n                data-testid=\"question-category\"\n              >\n                {question[current].category}\n              </p>\n              <p\n                data-testid=\"question-text\"\n              >\n                {question[current].question}\n              </p>\n              <div\n                data-testid=\"answer-options\"\n              >\n                {arrayAnswers\n                  .map((el, i) => (\n                    <button\n                      name={ el === question[current]\n                        .correct_answer ? CORRECT_ANSWER : `wrong-answer-${i}` }\n                      disabled={ disabledbutton }\n                      className=\"buttonAnswer\"\n                      type=\"button\"\n                      key={ i }\n                      onClick={ (e) => this.colorize(e) }\n                      data-testid={ el === question[current]\n                        .correct_answer ? CORRECT_ANSWER : `wrong-answer-${i}` }\n                    >\n                      {el}\n\n                    </button>\n                  ))}\n              </div>\n              <button\n                hidden={ !disabledbutton }\n                onClick={ this.nextQuestion }\n                type=\"button\"\n                data-testid=\"btn-next\"\n              >\n                Next\n              </button>\n              <p\n                id=\"timer\"\n              >\n                Timer:\n                {seconds}\n              </p>\n\n            </div>)}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.token,\n  questions: state.player.questions,\n});\n\nconst mapDispatchToProps = (dispacth) => ({\n  setScores: (payload) => dispacth(setScore(payload)),\n});\n\nPlayGame.propTypes = {\n  token: PropTypes.func.isRequired,\n  setScores: PropTypes.func.isRequired,\n  history: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayGame);\n"]},"metadata":{},"sourceType":"module"}