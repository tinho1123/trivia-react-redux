{"ast":null,"code":"var _jsxFileName = \"/home/wellington/\\xC1rea de Trabalho/projects/sd-016-b-project-trivia-react-redux/src/components/pages/PlayGame.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Header from './Header';\n\nclass PlayGame extends Component {\n  constructor() {\n    super();\n\n    this.getQuestions = async () => {\n      const {\n        token\n      } = this.props;\n      console.log(token);\n      const curr = `https://opentdb.com/api.php?amount=5&token=${token}`;\n      const response = await fetch(curr);\n      const questionsObjt = await response.json();\n      this.setState({\n        question: questionsObjt.results[0],\n        played: true,\n        arraySortedAlternatives: [questionsObjt.results[0].incorrect_answers, questionsObjt.results[0].correct_answer]\n      });\n    };\n\n    this.state = {\n      played: false,\n      question: '',\n      arraySortedAlternatives: []\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  render() {\n    const {\n      question,\n      played,\n      arraySortedAlternatives\n    } = this.state;\n    console.log(question, arraySortedAlternatives);\n    const magicNumber = 0.4;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }), !played ? null : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, question.category), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, question.question), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"answer-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, arraySortedAlternatives.sort(() => Math.random() - magicNumber).map((el, i) => /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      key: i,\n      \"data-testid\": `wrong-answer-${i}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 19\n      }\n    }, el)))));\n  }\n\n}\n/*\nAs alternativas devem ser exibidas em ordem aleatória\nDica: utilize botões (<button/>) para as alternativas\n */\n\n\nconst mapStateToProps = state => ({\n  token: state.token,\n  questions: state.player.questions\n});\n\nexport default connect(mapStateToProps)(PlayGame);","map":{"version":3,"sources":["/home/wellington/Área de Trabalho/projects/sd-016-b-project-trivia-react-redux/src/components/pages/PlayGame.jsx"],"names":["React","Component","connect","Header","PlayGame","constructor","getQuestions","token","props","console","log","curr","response","fetch","questionsObjt","json","setState","question","results","played","arraySortedAlternatives","incorrect_answers","correct_answer","state","componentDidMount","render","magicNumber","category","sort","Math","random","map","el","i","mapStateToProps","questions","player"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAC/BI,EAAAA,WAAW,GAAG;AACZ;;AADY,SAcdC,YAdc,GAcC,YAAY;AACzB,YAAM;AAAEC,QAAAA;AAAF,UAAY,KAAKC,KAAvB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,YAAMI,IAAI,GAAI,8CAA6CJ,KAAM,EAAjE;AACA,YAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACF,IAAD,CAA5B;AACA,YAAMG,aAAa,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA5B;AACA,WAAKC,QAAL,CAAc;AACZC,QAAAA,QAAQ,EAAEH,aAAa,CAACI,OAAd,CAAsB,CAAtB,CADE;AAEZC,QAAAA,MAAM,EAAE,IAFI;AAGZC,QAAAA,uBAAuB,EAAE,CAACN,aAAa,CAACI,OAAd,CAAsB,CAAtB,EAAyBG,iBAA1B,EACvBP,aAAa,CAACI,OAAd,CAAsB,CAAtB,EAAyBI,cADF;AAHb,OAAd;AAMD,KA1Ba;;AAGZ,SAAKC,KAAL,GAAa;AACXJ,MAAAA,MAAM,EAAE,KADG;AAEXF,MAAAA,QAAQ,EAAE,EAFC;AAGXG,MAAAA,uBAAuB,EAAE;AAHd,KAAb;AAKD;;AAEDI,EAAAA,iBAAiB,GAAG;AAClB,SAAKlB,YAAL;AACD;;AAgBDmB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAER,MAAAA,QAAF;AAAYE,MAAAA,MAAZ;AAAoBC,MAAAA;AAApB,QAAgD,KAAKG,KAA3D;AACAd,IAAAA,OAAO,CAACC,GAAR,CAAYO,QAAZ,EAAsBG,uBAAtB;AACA,UAAMM,WAAW,GAAG,GAApB;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEG,CAACP,MAAD,GAAU,IAAV,gBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAG,qBAAY,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqCF,QAAQ,CAACU,QAA9C,CADA,eAEA;AAAG,qBAAY,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCV,QAAQ,CAACA,QAA1C,CAFA,eAGA;AAAG,qBAAY,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGG,uBAAuB,CAACQ,IAAxB,CAA6B,MAAMC,IAAI,CAACC,MAAL,KAAgBJ,WAAnD,EACEK,GADF,CACM,CAACC,EAAD,EAAKC,CAAL,kBACH;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,GAAG,EAAGA,CAFR;AAGE,qBAAe,gBAAeA,CAAE,EAHlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGD,EALH,CAFH,CADH,CAHA,CAHN,CADF;AAqBD;;AAtD8B;AAyDjC;AACA;AACA;AACA;;;AACA,MAAME,eAAe,GAAIX,KAAD,KAAY;AAClChB,EAAAA,KAAK,EAAEgB,KAAK,CAAChB,KADqB;AAElC4B,EAAAA,SAAS,EAAEZ,KAAK,CAACa,MAAN,CAAaD;AAFU,CAAZ,CAAxB;;AAKA,eAAejC,OAAO,CAACgC,eAAD,CAAP,CAAyB9B,QAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Header from './Header';\n\nclass PlayGame extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      played: false,\n      question: '',\n      arraySortedAlternatives: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  getQuestions = async () => {\n    const { token } = this.props;\n    console.log(token);\n    const curr = `https://opentdb.com/api.php?amount=5&token=${token}`;\n    const response = await fetch(curr);\n    const questionsObjt = await response.json();\n    this.setState({\n      question: questionsObjt.results[0],\n      played: true,\n      arraySortedAlternatives: [questionsObjt.results[0].incorrect_answers,\n        questionsObjt.results[0].correct_answer],\n    });\n  };\n\n  render() {\n    const { question, played, arraySortedAlternatives } = this.state;\n    console.log(question, arraySortedAlternatives);\n    const magicNumber = 0.4;\n    return (\n      <div>\n        <Header />\n        {!played ? null\n          : <div>\n            <p data-testid=\"question-category\">{ question.category }</p>\n            <p data-testid=\"question-text\">{ question.question }</p>\n            <p data-testid=\"answer-options\">\n              {arraySortedAlternatives.sort(() => Math.random() - magicNumber)\n                .map((el, i) => (\n                  <button\n                    type=\"button\"\n                    key={ i }\n                    data-testid={ `wrong-answer-${i}` }\n                  >\n                    {el}\n                  </button>))}\n            </p>\n            </div>}\n      </div>\n    );\n  }\n}\n\n/*\nAs alternativas devem ser exibidas em ordem aleatória\nDica: utilize botões (<button/>) para as alternativas\n */\nconst mapStateToProps = (state) => ({\n  token: state.token,\n  questions: state.player.questions,\n});\n\nexport default connect(mapStateToProps)(PlayGame);\n"]},"metadata":{},"sourceType":"module"}